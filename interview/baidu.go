package interview

// 2023-12-19 二面

// 一面
// 给你一个整数 n ，按字典序返回范围 [1, n] 内所有整数。
//
// 你必须设计一个时间复杂度为 O(n) 的算法。
// 输入：n=123
// 输出：[1,10,100,101,102,103,104,105,106,107,108,109,11,110,111,112,113,114,115,116,117,118,119,12,120,121,
// 122,123,13,14,15,16,17,18,19,2,20,21,22,23,24,25,26,27,28,29,3,30,31,32,33,34,35,36,37,38,39,4,
// 40,41,42,43,44,45,46,47,48,49,5,50,51,52,53,54,55,56,57,58,59,6,60,61,62,63,64,65,66,67,68,69,7,
// 70,71,72,73,74,75,76,77,78,79,8,80,81,82,83,84,85,86,87,88,89,9,90,91,92,93,94,95,96,97,98,99]
func printOrder(n int) []int {
	// 先从1开始，由少到多开始
	next := 1
	if next > n {
		return []int{}
	}
	sum := []int{next}
	ok := true
	for {
		next, ok = getNext(next, n)
		if !ok {
			return sum
		}
		sum = append(sum, next)
	}
	return sum
}

func getNext(n int, limit int) (int, bool) {
	if n >= limit {
		n = n/10 + 1
		return n, true
	}

	// 14 => 15  10,100  101,102, 109,11, 1099, 11, 99,-1 123,13
	if n*10 <= limit {
		return n * 10, true
	}
	if n+1 <= limit {
		if (n+1)%10 == 0 {
			n = (n + 1) / 10
			for n%10 == 0 {
				n = n / 10
			}
			if n == 1 {
				return -1, false
			}
			return n, true
		}
		return n + 1, true
	}
	return -1, false
}

// [1 10 100 101 102 103 104 105 106 107 108 109 11 110 111 112 113 114 115 116 117 118 119 12
// 120 121 122 123 13 14 15 16 17 18 19 2 20 21 22 23 24 25 26 27 28 29 3 30 31 32 33 34 35 36
// 37 38 39 4 40 41 42 43 44 45 46 47 48 49 5 50 51 52 53 54 55 56 57 58 59 6 60 61 62 63 64
// 65 66 67 68 69 7 70 71 72 73 74 75 76 77 78 79 8 80 81 82 83 84 85 86 87 88 89 9 90 91 92
// 93 94 95 96 97 98 99], want []
