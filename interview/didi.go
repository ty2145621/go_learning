package interview

// 一只青蛙最初位于0点处，可以在直线上向正向或反向两个方向跳跃。比较特别的是，
// 青蛙每次跳跃的距离比前一次跳跃多一个单位，第一次跳跃的距离为一个单位。
// 现在问题是，如果让青蛙跳跃到x处，需要经过多少次跳跃，你能解决这个问题吗？
// 输出描述
// 在单独的行中输出青蛙最少需要跳跃的次数。

func jump(x int) int {

}

// 小赛酷爱游戏，在他卧室的抽屉里有n个游戏币，总面值m，游戏币的设置有1分的，2分的，5分的，
// 而在小赛所拥有的游戏币中有些面值的游戏币可能没有，求一共有多少种可能的游戏币组合方式？
// 入参：
// 输入两个数n(游戏币的个数)，m(总面值)。
// 输出：
// 请输出可能的组合方式；

func coin(n, m int) int {
	if m == 0 {
		return 1
	}

	/*cost1, cost2, cost5 := 0, 0, 0
	dp := make([]int, m+1)
	dp[0] = 0
	dp[1] = 1
	dp[2] = 2
	for i := 3; i <= m; i++ {
		if i >= 5 {
			dp[i] = dp[i-1] + dp[i-2] + dp[i-5]
		} else {
			dp[i] = dp[i-1] + dp[i-2]
		}
	}
	return dp[m]*/

	// 5a + 2b + c = m
	// a + b + c = n
	// 4a + b = m - n
	return (m-n)/4 + 1
}
